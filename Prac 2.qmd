---
title: "Prac day 4"
format: html
editor: visual
---

```{r,  echo=TRUE, results='hide'}
# Install tidyverse if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
library(tidyverse)

# Install and load nycflights13 for flight data
if (!requireNamespace("nycflights13", quietly = TRUE)) {
  install.packages("nycflights13")
}
library(nycflights13)
```

#Question 1
Generating the simulated data.

```{r}
set.seed(1)
x <- seq(1, 100, by = 1)
n <- length(x)
e <- rnorm(100, mean = 0, sd = 0.2)

y <- sin(x/10) + e


```

#Question 2
Implementing the lowess algorithm and defining a custom algorithm that returns the smoothed values.


```{r}
customLowess <- function(x, y, f){
  
  #span calculation
  n <- length(x)
  k <- ceiling(f*n)
  y_smooth <- numeric(n)
  
  for (i in 1:n){
    
    #find distances, select k nearest neighbour
    dists <- abs(x - x[i])
    sorted_indices <- order(dists)
    neighbors <- sorted_indices[1:k]
    dmax <- max(dists[neighbors])
    
    # Compute weights using the tricube kernel
    weights <- (1 - (dists[neighbors] / dmax)^3)^3
    weights[dists[neighbors] >= dmax] <- 0
    
    # Perform weighted linear regression
    X <- cbind(1, x[neighbors])
    W <- diag(weights)
    beta <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y[neighbors]
    
    # Predict smoothed value
    y_smooth[i] <- beta[1] + beta[2] * x[i]
    
  }
  
  return(y_smooth)
}
  

# Apply custom LOWESS
f <- 0.2
y_custom_lowess <- customLowess(x, y, f)

```


#Question 3
Applying R's built-in lowess 

```{r}
# Apply R's built-in LOWESS
lowess_result <- lowess(x, y, f = f, iter = 0)

```

Convert to data frames for plotting

```{r}
original_data <- data.frame(x, y)
custom_lowess_data <- data.frame(x, y_smooth = y_custom_lowess)
built_in_lowess_data <- data.frame(x = lowess_result$x, y_smooth = lowess_result$y)
```

Plot comparison

```{r}
ggplot() +
  geom_point(data = original_data, aes(x, y), alpha = 0.5, color = "gray") +
  geom_line(data = custom_lowess_data, aes(x, y_smooth), color = "blue", size = 1, linetype = "dashed", alpha = 0.8) +
  geom_line(data = built_in_lowess_data, aes(x, y_smooth), color = "red", size = 1, alpha = 0.8) +
  labs(title = "Comparison of Custom LOWESS and R's Built-in LOWESS", 
       x = "X", y = "Smoothed Y", 
       caption = "Blue Dashed: Custom LOWESS, Red: Built-in LOWESS") +
  theme_minimal()
```




